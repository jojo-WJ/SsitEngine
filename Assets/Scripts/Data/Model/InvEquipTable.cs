// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Table
{
	
	

	// Defined in table: InvEquipTableModel
	
  [System.Serializable]
	public partial class InvEquipTableModel
	{
	
		public Tabtoy.Logger TableLogger = Tabtoy.Logger.Instance();
	
		
		/// <summary> 
		/// InvEquipMent
		/// </summary>
		public List<InvEquipMentDefine> InvEquipMent = new List<InvEquipMentDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, InvEquipMentDefine> _InvEquipMentByEqiupID = new Dictionary<int, InvEquipMentDefine>();
        public InvEquipMentDefine GetInvEquipMentByEqiupID(int EqiupID, InvEquipMentDefine def = default(InvEquipMentDefine))
        {
            InvEquipMentDefine ret;
            if ( _InvEquipMentByEqiupID.TryGetValue( EqiupID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(InvEquipMentDefine) )
			{
				TableLogger.ErrorLine("GetInvEquipMentByEqiupID failed, EqiupID: {0}", EqiupID);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
      public static void Deserialize( InvEquipTableModel ins)
		{
            			// Build InvEquipMent Index
			for( int i = 0;i< ins.InvEquipMent.Count;i++)
			{
				var element = ins.InvEquipMent[i];
				
				ins._InvEquipMentByEqiupID.Add(element.EqiupID, element);
				
			}

        }
        
      public void DeserializeRe( InvEquipTableModel ins)
		{
            			// Build InvEquipMent Index
			for( int i = 0;i< ins.InvEquipMent.Count;i++)
			{
				var element = ins.InvEquipMent[i];
				
				if(!_InvEquipMentByEqiupID.ContainsKey(element.EqiupID))
				{
					this.InvEquipMent.Add(ins.InvEquipMent[i]);
					_InvEquipMentByEqiupID.Add(element.EqiupID, element);
				}
				
			}

        }
        
	

	} 

	// Defined in table: InvEquipMent
	
  [System.Serializable]
	public partial class InvEquipMentDefine
	{
	
		
		/// <summary> 
		/// id
		/// </summary>
		public int EqiupID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string EquipName = ""; 
		
		/// <summary> 
		/// 描述
		/// </summary>
		public string EquipDesc = ""; 
		
		/// <summary> 
		/// 装备巢==装备类型 0,     // 帽子 1,     // 耳塞 2      // 眼罩 3,     // 面具、口罩 4,     // 眼镜 5,     // 左胸包 6,    // 右胸包 7,    // 背部辅助（呼吸器） 8,    // 手套 9,     // 手部 10,   // 大腿外包对讲机） 11,   // 鞋子  12、//衣服 13、//扳手
		/// </summary>
		public int SlotType = 0; 
		
		/// <summary> 
		/// 使用巢（位于 同一类型下的 不可附加 替换逻辑） "空"  -1, "手部"  0,
		/// </summary>
		public int UseSlotType = -1; 
		
		/// <summary> 
		/// use SlotType！=-1 使用节点 手部默认挂点 0 灭火器挂点 1 消防软管挂点 2
		/// </summary>
		public int UseNodeType = 0; 
		
		/// <summary> 
		/// 是否可融合 注：（有些模型根本融合不了） 0、不融合【非skin】、 1、融合【skin】、 2、融合单合并mesh 3、仅合并骨骼【skin】 3、改变材质融合（无）
		/// </summary>
		public int IsCombine = 0; 
		
		/// <summary> 
		/// 根据工种划分（工种类型） 1、担架工；2、普通工人 3、医生；4、护士
		/// </summary>
		public List<int> UseAuthority = new List<int>(); 
		
		/// <summary> 
		/// 0：普通 1：中级 2：高级 3：特级
		/// </summary>
		public int Quality = 0; 
		
		/// <summary> 
		/// 图标
		/// </summary>
		public string IconPath = ""; 
		
		/// <summary> 
		/// 预设路径、材质路径
		/// </summary>
		public string PrefabPath = ""; 
	
	

	} 

}

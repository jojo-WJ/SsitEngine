// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Table
{
	
	// Defined in table: ToolBox
	public enum En_BoxToolType
	{
		
		
		None = 0, 
		
		/// <summary> 
		/// 检测仪器
		/// </summary>
		Instrumentation = 1001, 
		
		/// <summary> 
		/// 常规器材工具
		/// </summary>
		GeneralEquipment = 1002, 
		
		/// <summary> 
		/// 通讯工具
		/// </summary>
		CommunicationTool = 1003, 
		
		/// <summary> 
		/// 堵漏工具
		/// </summary>
		LeakBlockingTool = 1004, 
		
		/// <summary> 
		/// 输转工具
		/// </summary>
		TransferTool = 1005, 
		
		/// <summary> 
		/// 急救物品
		/// </summary>
		FirstAidItem = 1006, 
	
	}
	
	

	// Defined in table: ToolBoxTableModel
	
  [System.Serializable]
	public partial class ToolBoxTableModel
	{
	
		public Tabtoy.Logger TableLogger = Tabtoy.Logger.Instance();
	
		
		/// <summary> 
		/// ToolBox
		/// </summary>
		public List<ToolBoxDefine> ToolBox = new List<ToolBoxDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, ToolBoxDefine> _ToolBoxByToolTypeID = new Dictionary<int, ToolBoxDefine>();
        public ToolBoxDefine GetToolBoxByToolTypeID(int ToolTypeID, ToolBoxDefine def = default(ToolBoxDefine))
        {
            ToolBoxDefine ret;
            if ( _ToolBoxByToolTypeID.TryGetValue( ToolTypeID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ToolBoxDefine) )
			{
				TableLogger.ErrorLine("GetToolBoxByToolTypeID failed, ToolTypeID: {0}", ToolTypeID);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
      public static void Deserialize( ToolBoxTableModel ins)
		{
            			// Build ToolBox Index
			for( int i = 0;i< ins.ToolBox.Count;i++)
			{
				var element = ins.ToolBox[i];
				
				ins._ToolBoxByToolTypeID.Add(element.ToolTypeID, element);
				
			}

        }
        
      public void DeserializeRe( ToolBoxTableModel ins)
		{
            			// Build ToolBox Index
			for( int i = 0;i< ins.ToolBox.Count;i++)
			{
				var element = ins.ToolBox[i];
				
				if(!_ToolBoxByToolTypeID.ContainsKey(element.ToolTypeID))
				{
					this.ToolBox.Add(ins.ToolBox[i]);
					_ToolBoxByToolTypeID.Add(element.ToolTypeID, element);
				}
				
			}

        }
        
	

	} 

	// Defined in table: ToolBox
	
  [System.Serializable]
	public partial class ToolBoxDefine
	{
	
		
		/// <summary> 
		/// 工具类型ID
		/// </summary>
		public int ToolTypeID = 0; 
		
		/// <summary> 
		/// 工具类型名称
		/// </summary>
		public string ToolTypeName = ""; 
		
		/// <summary> 
		/// 所包含技能
		/// </summary>
		public List<int> SkillList = new List<int>(); 
	
	

	} 

}

// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Table
{
	
	// Defined in table: Skill
	public enum En_SkillEventType
	{
		
		
		OpenForm = 0, 
		
		
		CreateObject = 1, 
		
		
		OnSkillEndContingencyPlan = 2, 
		
		
		OnUseGasDetect = 3, 
		
		
		PlayMHQAniml = 4, 
		
		
		UseWaterPipe = 5, 
		
		
		OpenRemoteSwitch = 6, 
		
		
		AimToFire = 7, 
		
		
		PipeAimToFire = 8, 
		
		
		ActiveXFP = 9, 
		
		
		SwingXFP = 10, 
		
		
		SwingXFP1 = 11, 
		
		
		StartDrawArrowPath = 12, 
		
		
		StartDrawSEntry = 13, 
		
		
		OnSwitch = 14, 
		
		
		OnCharacterState = 18, 
		
		
		AddProtectionObj = 19, 
	
	}
	
	

	// Defined in table: SkillTableModel
	
  [System.Serializable]
	public partial class SkillTableModel
	{
	
		public Tabtoy.Logger TableLogger = Tabtoy.Logger.Instance();
	
		
		/// <summary> 
		/// Skill
		/// </summary>
		public List<SkillDefine> Skill = new List<SkillDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, SkillDefine> _SkillBySkillID = new Dictionary<int, SkillDefine>();
        public SkillDefine GetSkillBySkillID(int SkillID, SkillDefine def = default(SkillDefine))
        {
            SkillDefine ret;
            if ( _SkillBySkillID.TryGetValue( SkillID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(SkillDefine) )
			{
				TableLogger.ErrorLine("GetSkillBySkillID failed, SkillID: {0}", SkillID);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
      public static void Deserialize( SkillTableModel ins)
		{
            			// Build Skill Index
			for( int i = 0;i< ins.Skill.Count;i++)
			{
				var element = ins.Skill[i];
				
				ins._SkillBySkillID.Add(element.SkillID, element);
				
			}

        }
        
      public void DeserializeRe( SkillTableModel ins)
		{
            			// Build Skill Index
			for( int i = 0;i< ins.Skill.Count;i++)
			{
				var element = ins.Skill[i];
				
				if(!_SkillBySkillID.ContainsKey(element.SkillID))
				{
					this.Skill.Add(ins.Skill[i]);
					_SkillBySkillID.Add(element.SkillID, element);
				}
				
			}

        }
        
	

	} 

	// Defined in table: Skill
	
  [System.Serializable]
	public partial class SkillDefine
	{
	
		
		/// <summary> 
		/// 技能ID
		/// </summary>
		public int SkillID = 0; 
		
		/// <summary> 
		/// 技能名称（五个字以内）
		/// </summary>
		public string SkillName = ""; 
		
		/// <summary> 
		/// 技能描述
		/// </summary>
		public string SkillDesc = ""; 
		
		/// <summary> 
		/// 技能类型 0：主动 1：被动
		/// </summary>
		public int SkillType = 0; 
		
		/// <summary> 
		/// IS_Enable = 0, IS_Disable, IS_Excuting
		/// </summary>
		public int SkillState = 0; 
		
		/// <summary> 
		/// 技能消息类型  1、打开界面 2、创建预设 3、位置导航 4、事件触发 5、关联子数据
		/// </summary>
		public int SkillMsgType = 0; 
		
		/// <summary> 
		/// 触发类型 0：不触发 1：Button类型 2：Toggle类型
		/// </summary>
		public int SkillTriggerType = 0; 
		
		/// <summary> 
		/// 技能等级 1：1级技能 2：2及技能
		/// </summary>
		public int SkillLevelType = 0; 
		
		/// <summary> 
		/// 开启条件类型 1、装备 2、使用 3、技能状态
		/// </summary>
		public int SkillConditionType = 0; 
		
		/// <summary> 
		/// 条件参数 1、装备类型 2、使用节点
		/// </summary>
		public int SkillConditionParam = 0; 
		
		/// <summary> 
		/// 技能图标路径
		/// </summary>
		public string SkillIconPath = ""; 
		
		/// <summary> 
		/// 触发消息类型 枚举类型，详细查看第二张sheet
		/// </summary>
		public int EventType = 0; 
		
		/// <summary> 
		/// 触发消息参数
		/// </summary>
		public string EventParam = ""; 
		
		/// <summary> 
		/// 技能图标路径
		/// </summary>
		public string ExtraSkillIconPath = ""; 
		
		
		public string ExtraMsgName = ""; 
		
		
		public string ExtraMsgParm = ""; 
	
	

	} 

}

// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Table
{
	
	// Defined in table: Content
	public enum EnText
	{
		
		
		None = 0, 
		
		/// <summary> 
		/// 系统异常
		/// </summary>
		CodeError = 1, 
		
		/// <summary> 
		/// 数据库异常
		/// </summary>
		DataBaseError = 2, 
		
		/// <summary> 
		/// 业务异常
		/// </summary>
		LogicError = 3, 
		
		/// <summary> 
		/// 测试1
		/// </summary>
		CommonTip = 1000, 
		
		/// <summary> 
		/// 连接中...
		/// </summary>
		ConnectTip = 1001, 
		
		/// <summary> 
		/// 已断开连接
		/// </summary>
		DeConnectTip = 1002, 
		
		/// <summary> 
		/// 下载中...
		/// </summary>
		DownLoadTip = 1003, 
		
		/// <summary> 
		/// 上传中...
		/// </summary>
		UpLoadTip = 1004, 
		
		/// <summary> 
		/// 网络连接失败
		/// </summary>
		NetDeConnetTip = 1005, 
		
		/// <summary> 
		/// 数据收集中...
		/// </summary>
		DataCollectTip = 1006, 
		
		/// <summary> 
		/// 单机训练
		/// </summary>
		SingleMode = 1007, 
		
		/// <summary> 
		/// 多人应急
		/// </summary>
		MutilMode = 1008, 
		
		/// <summary> 
		/// 登陆中
		/// </summary>
		LoginTip = 1009, 
		
		/// <summary> 
		/// 资源加载中...
		/// </summary>
		LoadingTip = 1010, 
		
		/// <summary> 
		/// 提交成功
		/// </summary>
		FeedBackSuccessTip = 1011, 
		
		/// <summary> 
		/// 提交失败
		/// </summary>
		FeedBackFailTip = 1012, 
		
		/// <summary> 
		/// 提交内容为空!
		/// </summary>
		FeedBackTip = 1013, 
		
		/// <summary> 
		/// 功能
		/// </summary>
		DevelopTip = 1014, 
		
		
		SceneNameNullTip = 1015, 
		
		
		SceneModelNullTip = 1016, 
		
		
		SceneIntustryNullTip = 1017, 
		
		
		SceneCompanyNullTip = 1018, 
		
		/// <summary> 
		/// 数据加载
		/// </summary>
		DataLoadingTip = 1019, 
		
		/// <summary> 
		/// 场景加载
		/// </summary>
		SceneLoadingTip = 1020, 
		
		
		UpLoadFailTip = 1021, 
		
		
		UpLoadSuccessTip = 1022, 
		
		/// <summary> 
		/// 首页
		/// </summary>
		HomePageModule = 1023, 
		
		/// <summary> 
		/// 系统模块
		/// </summary>
		SystemModule = 1024, 
		
		/// <summary> 
		/// 资源管理
		/// </summary>
		ResourceManagementModule = 1025, 
		
		/// <summary> 
		/// 场景管理
		/// </summary>
		SceneManagerModule = 1026, 
		
		/// <summary> 
		/// 事故管理
		/// </summary>
		AccidentManagementModule = 1027, 
		
		/// <summary> 
		/// 切换正在编辑的进程的提示
		/// </summary>
		ChangeEditProcedureTip = 1028, 
		
		/// <summary> 
		/// 是否退出场景编辑
		/// </summary>
		ExitSceneEditTip = 1029, 
		
		/// <summary> 
		/// 无法删除内置场景
		/// </summary>
		CannotDeleteInsideSceneTip = 1030, 
		
		/// <summary> 
		/// 是否删除当前场景？
		/// </summary>
		DeleteSceneTip = 1031, 
		
		/// <summary> 
		/// 不是本人创的场景无法删除
		/// </summary>
		CannotDeleteSceneTip = 1032, 
		
		/// <summary> 
		/// 机构管理界面
		/// </summary>
		OrganizationManagementForm = 1033, 
		
		/// <summary> 
		/// 用户管理界面
		/// </summary>
		UserManagementForm = 1034, 
		
		/// <summary> 
		/// 日志管理界面
		/// </summary>
		LogManagementForm = 1035, 
		
		/// <summary> 
		/// 基础信息界面
		/// </summary>
		BaseinfoForm = 1036, 
		
		/// <summary> 
		/// 应急力量界面
		/// </summary>
		EmergencyPowerForm = 1037, 
		
		/// <summary> 
		/// 应急队伍界面
		/// </summary>
		EmergencyTeamForm = 1038, 
		
		/// <summary> 
		/// 应急措施界面
		/// </summary>
		EmergencyMeasureForm = 1039, 
		
		/// <summary> 
		/// 应急任务界面
		/// </summary>
		EmergencyTaskForm = 1040, 
		
		/// <summary> 
		/// 评估标准界面
		/// </summary>
		EvaluativeCriteriaForm = 1041, 
		
		/// <summary> 
		/// 事故设定界面
		/// </summary>
		AccidentSettingForm = 1042, 
		
		/// <summary> 
		/// 演练规则界面
		/// </summary>
		PracticeRulesForm = 1043, 
		
		/// <summary> 
		/// 事故名称为空提示
		/// </summary>
		AccidentNameNullTip = 1044, 
		
		/// <summary> 
		/// 事故时间格式错误提示
		/// </summary>
		AccidentTimeFormatWrongTip = 1045, 
		
		/// <summary> 
		/// 事故类型为空提示
		/// </summary>
		AccidentTypeNullTip = 1046, 
		
		/// <summary> 
		/// 事故所属装置为空提示
		/// </summary>
		AccidentDeviceNullTip = 1047, 
		
		/// <summary> 
		/// 预案编辑
		/// </summary>
		DrillEditModeTip = 1048, 
		
		/// <summary> 
		/// 单机
		/// </summary>
		SingleOperateType = 1049, 
		
		/// <summary> 
		/// 协同
		/// </summary>
		MultipleOperateType = 1050, 
		
		/// <summary> 
		/// 删除选中的任务类型
		/// </summary>
		DeleteSelectTaskTypeTip = 1051, 
		
		/// <summary> 
		/// 删除任务类型成功
		/// </summary>
		DeleteTaskTypeSucceed = 1052, 
		
		/// <summary> 
		/// 任务名称不能为空
		/// </summary>
		AddTaskNameCanNotBeNull = 1053, 
		
		/// <summary> 
		/// 任务添加成功
		/// </summary>
		AddTaskSucceed = 1054, 
		
		/// <summary> 
		/// 添加任务类型
		/// </summary>
		AddEmergencyTaskTypeTittle = 1055, 
		
		/// <summary> 
		/// 修改任务类型名称
		/// </summary>
		EditEmergencyTaskTypeTittle = 1056, 
		
		/// <summary> 
		/// 任务删除成功
		/// </summary>
		DeleteTaskInfoSucceed = 1057, 
		
		/// <summary> 
		/// 任务个数为0无法编辑任务流程
		/// </summary>
		CanNotEditTaskProcedureTip = 1058, 
		
		/// <summary> 
		/// 已选择X个
		/// </summary>
		SelectCountTip = 1059, 
		
		/// <summary> 
		/// 所选任务流程不能为空
		/// </summary>
		SelectTaskProcedureCanNotNull = 1060, 
		
		/// <summary> 
		/// 应急力量添加角色名称为空
		/// </summary>
		CharacterNameNullTip = 1061, 
		
		/// <summary> 
		/// 应急力量添加岗位名称为空
		/// </summary>
		EmergencyPowerPostNullTip = 1062, 
		
		/// <summary> 
		/// 请先添加岗位
		/// </summary>
		NoProsstionTip = 1063, 
		
		/// <summary> 
		/// 是否删除选中的岗位类型？
		/// </summary>
		DeleteCharacterTypeTip = 1064, 
		
		/// <summary> 
		/// 是否删除选中的角色？
		/// </summary>
		DeleteCharacterTip = 1065, 
		
		/// <summary> 
		/// 场景锁定编辑提示
		/// </summary>
		EditSceneLockTip = 1066, 
		
		/// <summary> 
		/// 预案锁定编辑提示
		/// </summary>
		EditSchemeLockTip = 1067, 
		
		/// <summary> 
		/// 场景锁定删除提示
		/// </summary>
		DeleteSceneLockTip = 1068, 
		
		/// <summary> 
		/// 预案锁定删除提示
		/// </summary>
		DeleteSchemeLockTip = 1069, 
		
		/// <summary> 
		/// 放置失败
		/// </summary>
		PlaceFailedTip = 1070, 
		
		/// <summary> 
		/// 绘制失败
		/// </summary>
		DrawFailedTip = 1071, 
	
	}
	
	

	// Defined in table: ContentTableModel
	
  [System.Serializable]
	public partial class ContentTableModel
	{
	
		public Tabtoy.Logger TableLogger = Tabtoy.Logger.Instance();
	
		
		/// <summary> 
		/// Content
		/// </summary>
		public List<ContentDefine> Content = new List<ContentDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, ContentDefine> _ContentByindex = new Dictionary<int, ContentDefine>();
        public ContentDefine GetContentByIndex(int index, ContentDefine def = default(ContentDefine))
        {
            ContentDefine ret;
            if ( _ContentByindex.TryGetValue( index, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ContentDefine) )
			{
				TableLogger.ErrorLine("GetContentByindex failed, index: {0}", index);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
      public static void Deserialize( ContentTableModel ins)
		{
            			// Build Content Index
			for( int i = 0;i< ins.Content.Count;i++)
			{
				var element = ins.Content[i];
				
				ins._ContentByindex.Add(element.index, element);
				
			}

        }
        
      public void DeserializeRe( ContentTableModel ins)
		{
            			// Build Content Index
			for( int i = 0;i< ins.Content.Count;i++)
			{
				var element = ins.Content[i];
				
				if(!_ContentByindex.ContainsKey(element.index))
				{
					this.Content.Add(ins.Content[i]);
					_ContentByindex.Add(element.index, element);
				}
				
			}

        }
        
	

	} 

	// Defined in table: Content
	
  [System.Serializable]
	public partial class ContentDefine
	{
	
		
		/// <summary> 
		/// 索引
		/// </summary>
		public int index = 0; 
		
		/// <summary> 
		/// 文本数据
		/// </summary>
		public string content = ""; 
	
	

	} 

}

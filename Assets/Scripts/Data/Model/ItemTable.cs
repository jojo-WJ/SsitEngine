// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace Table
{
	
	

	// Defined in table: ItemTableModel
	
  [System.Serializable]
	public partial class ItemTableModel
	{
	
		public Tabtoy.Logger TableLogger = Tabtoy.Logger.Instance();
	
		
		/// <summary> 
		/// Item
		/// </summary>
		public List<ItemDefine> Item = new List<ItemDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, ItemDefine> _ItemByItemID = new Dictionary<int, ItemDefine>();
        public ItemDefine GetItemByItemID(int ItemID, ItemDefine def = default(ItemDefine))
        {
            ItemDefine ret;
            if ( _ItemByItemID.TryGetValue( ItemID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ItemDefine) )
			{
				TableLogger.ErrorLine("GetItemByItemID failed, ItemID: {0}", ItemID);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
      public static void Deserialize( ItemTableModel ins)
		{
            			// Build Item Index
			for( int i = 0;i< ins.Item.Count;i++)
			{
				var element = ins.Item[i];
				
				ins._ItemByItemID.Add(element.ItemID, element);
				
			}

        }
        
      public void DeserializeRe( ItemTableModel ins)
		{
            			// Build Item Index
			for( int i = 0;i< ins.Item.Count;i++)
			{
				var element = ins.Item[i];
				
				if(!_ItemByItemID.ContainsKey(element.ItemID))
				{
					this.Item.Add(ins.Item[i]);
					_ItemByItemID.Add(element.ItemID, element);
				}
				
			}

        }
        
	

	} 

	// Defined in table: Item
	
  [System.Serializable]
	public partial class ItemDefine
	{
	
		
		/// <summary> 
		/// 道具ID 1000-2999 事故关联 3000-3999 普通关联 4000-4999 任务关联 5000-5999 任务载具关联 6000-6999 角色关联 7000+其他
		/// </summary>
		public int ItemID = 0; 
		
		/// <summary> 
		/// 资源id
		/// </summary>
		public int ResId = 0; 
		
		/// <summary> 
		/// 道具名称
		/// </summary>
		public string ItemName = ""; 
		
		/// <summary> 
		/// 道具描述
		/// </summary>
		public string ItemDesc = ""; 
		
		/// <summary> 
		/// 道具类型 1、事故类型 2、普通类型 3、任务类型 4、角色类型 5、后台编辑类型
		/// </summary>
		public int ItemType = 0; 
		
		/// <summary> 
		/// 事故类子类型 1、火 2、气体 3、伤员 4、障碍物 普通道具类型 1、通用类型 2、应急力量类型 3、灭火器  4、消防炮 5、通用IK类 角色类子类型 1、担架工 2、普通工人 3、医生 4、护士 5、无关人员 6、外承包商 场景编辑子类型 1.管道/阀门 2.触发器 3.标签 4.应急资源
		/// </summary>
		public int itemSubType = 0; 
		
		/// <summary> 
		/// 操作组类型 1、普通信息查看 2、通用器具操作 3、通用载具操作 4、消防炮操作 5、人物操作  20、火焰操作 21、气体操作 22、障碍操作 23、伤员操作
		/// </summary>
		public int OperateGroupType = 0; 
		
		/// <summary> 
		/// 0：任意地方 1：路上 2：地上 3：路上/地上
		/// </summary>
		public int PlaceLayer = 0; 
		
		/// <summary> 
		/// 是否能点穿
		/// </summary>
		public int IsThrough = 0; 
		
		/// <summary> 
		/// 圆形道具图标
		/// </summary>
		public string ItemCircleIconPath = ""; 
		
		/// <summary> 
		/// 道具图标Id
		/// </summary>
		public int IconId = 0; 
		
		/// <summary> 
		/// 附属技能列表
		/// </summary>
		public List<int> AttachedSkillList = new List<int>(); 
		
		/// <summary> 
		/// 附属道具列表
		/// </summary>
		public List<int> AttachedItemList = new List<int>(); 
		
		/// <summary> 
		/// 触发关联类型 0：空 1、技能 2、道具 3、同组 4、本端
		/// </summary>
		public int RelationType = 0; 
		
		/// <summary> 
		/// 关联技能列表
		/// </summary>
		public List<int> RelationSkillList = new List<int>(); 
		
		/// <summary> 
		/// 关联道具列表
		/// </summary>
		public List<int> RelationItemList = new List<int>(); 
	
	

	} 

}

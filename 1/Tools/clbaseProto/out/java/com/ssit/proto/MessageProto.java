// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/message.proto

package com.ssit.proto;

public final class MessageProto {
  private MessageProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code SSIT.proto.MessageID}
   */
  public enum MessageID
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LoginModel = 0;</code>
     *
     * <pre>
     *登录模块
     * </pre>
     */
    LoginModel(0, 0),
    /**
     * <code>CSLogin = 1;</code>
     *
     * <pre>
     * 登录
     * </pre>
     */
    CSLogin(1, 1),
    /**
     * <code>SCLoginResult = 2;</code>
     *
     * <pre>
     *登录返回
     * </pre>
     */
    SCLoginResult(2, 2),
    /**
     * <code>CSLogout = 3;</code>
     *
     * <pre>
     *退出
     * </pre>
     */
    CSLogout(3, 3),
    /**
     * <code>SCLogoutResult = 4;</code>
     *
     * <pre>
     *退出返回
     * </pre>
     */
    SCLogoutResult(4, 4),
    /**
     * <code>SCFeedBackSaveResult = 5;</code>
     *
     * <pre>
     *添加或修改反馈意见返回  仅仅定义消息id
     * </pre>
     */
    SCFeedBackSaveResult(5, 5),
    /**
     * <code>SystemModel = 1000;</code>
     *
     * <pre>
     *系统管理模块
     * </pre>
     */
    SystemModel(6, 1000),
    /**
     * <code>SCOrganizeInfoListResult = 1001;</code>
     *
     * <pre>
     *机构管理列表 返回   使用通用查询请求
     * </pre>
     */
    SCOrganizeInfoListResult(7, 1001),
    /**
     * <code>SCSaveOrganizeInfoResult = 1002;</code>
     *
     * <pre>
     *添加或修改机构返回  仅仅定义消息id
     * </pre>
     */
    SCSaveOrganizeInfoResult(8, 1002),
    /**
     * <code>SCDeleteOrganizeInfoResult = 1003;</code>
     *
     * <pre>
     *删除机构管理返回    
     * </pre>
     */
    SCDeleteOrganizeInfoResult(9, 1003),
    /**
     * <code>SCUserInfoListResult = 1004;</code>
     *
     * <pre>
     *用户列表返回    使用通用查询请求
     * </pre>
     */
    SCUserInfoListResult(10, 1004),
    /**
     * <code>SCSaveUserInfoResult = 1005;</code>
     *
     * <pre>
     *添加或修用户返回
     * </pre>
     */
    SCSaveUserInfoResult(11, 1005),
    /**
     * <code>SCDeleteUserInfoResult = 1006;</code>
     *
     * <pre>
     *删除用户返回
     * </pre>
     */
    SCDeleteUserInfoResult(12, 1006),
    /**
     * <code>SCAuthorityListResult = 1007;</code>
     *
     * <pre>
     *权限列表返回		使用通用查询请求
     * </pre>
     */
    SCAuthorityListResult(13, 1007),
    /**
     * <code>SCLogInfoListResult = 1008;</code>
     *
     * <pre>
     *日志列表返回  使用通用查询请求
     * </pre>
     */
    SCLogInfoListResult(14, 1008),
    /**
     * <code>SCDeleteLogInfoResult = 1009;</code>
     *
     * <pre>
     *删除日志返回
     * </pre>
     */
    SCDeleteLogInfoResult(15, 1009),
    /**
     * <code>SceneModel = 2000;</code>
     *
     * <pre>
     *场景模块
     * </pre>
     */
    SceneModel(16, 2000),
    /**
     * <code>SCCompanyInfoListResult = 2001;</code>
     *
     * <pre>
     *企业列表返回 	使用通用查询请求
     * </pre>
     */
    SCCompanyInfoListResult(17, 2001),
    /**
     * <code>SCSaveCompanyInfoResult = 2002;</code>
     *
     * <pre>
     *添加或修改企业返回  仅仅定义消息id
     * </pre>
     */
    SCSaveCompanyInfoResult(18, 2002),
    /**
     * <code>SCDeleteCompanyInfoResult = 2003;</code>
     *
     * <pre>
     *删除企业返回
     * </pre>
     */
    SCDeleteCompanyInfoResult(19, 2003),
    /**
     * <code>SCIndustryInfoListResult = 2004;</code>
     *
     * <pre>
     *行业列表返回  使用通用查询请求
     * </pre>
     */
    SCIndustryInfoListResult(20, 2004),
    /**
     * <code>SCSaveIndustryInfoResult = 2005;</code>
     *
     * <pre>
     *添加或修改行业返回  仅仅定义消息id
     * </pre>
     */
    SCSaveIndustryInfoResult(21, 2005),
    /**
     * <code>SCDeleteIndustryInfoResult = 2006;</code>
     *
     * <pre>
     *删除行业返回
     * </pre>
     */
    SCDeleteIndustryInfoResult(22, 2006),
    /**
     * <code>SCSaveDeviceInfoResult = 2007;</code>
     *
     * <pre>
     *添加或修改设备信息
     * </pre>
     */
    SCSaveDeviceInfoResult(23, 2007),
    /**
     * <code>SCDeviceBaseInfolistResult = 2008;</code>
     *
     * <pre>
     *请求设备列表 通用查询
     * </pre>
     */
    SCDeviceBaseInfolistResult(24, 2008),
    /**
     * <code>SCSaveSceneInfoResult = 2009;</code>
     *
     * <pre>
     *添加或修改场景返回 仅仅定义消息id
     * </pre>
     */
    SCSaveSceneInfoResult(25, 2009),
    /**
     * <code>SCSceneInfoListResult = 2010;</code>
     *
     * <pre>
     *场景列表返回  使用通用查询请求
     * </pre>
     */
    SCSceneInfoListResult(26, 2010),
    /**
     * <code>SCDeleteSceneInfoResult = 2011;</code>
     *
     * <pre>
     *删除场景返回
     * </pre>
     */
    SCDeleteSceneInfoResult(27, 2011),
    /**
     * <code>SCSwitchDeviceInfolistResult = 2012;</code>
     *
     * <pre>
     *远程开关列表 使用通用查询请求
     * </pre>
     */
    SCSwitchDeviceInfolistResult(28, 2012),
    /**
     * <code>SCSaveSwitchDeviceInfoResult = 2013;</code>
     *
     * <pre>
     *添加或修改远程开关返回 仅仅定义消息id
     * </pre>
     */
    SCSaveSwitchDeviceInfoResult(29, 2013),
    /**
     * <code>SCDeleteSwitchDeviceInfoResult = 2014;</code>
     *
     * <pre>
     *删除远程开关返回
     * </pre>
     */
    SCDeleteSwitchDeviceInfoResult(30, 2014),
    /**
     * <code>SCBundingSwitchDeviceResult = 2015;</code>
     *
     * <pre>
     *绑定远程开关返回  仅仅定义消息id
     * </pre>
     */
    SCBundingSwitchDeviceResult(31, 2015),
    /**
     * <code>SCRemoveBundingSwitchDeviceResult = 2016;</code>
     *
     * <pre>
     *解绑远程开关返回
     * </pre>
     */
    SCRemoveBundingSwitchDeviceResult(32, 2016),
    /**
     * <code>SCDeviceTypelistResult = 2017;</code>
     *
     * <pre>
     *设备类型列表返回
     * </pre>
     */
    SCDeviceTypelistResult(33, 2017),
    /**
     * <code>SCSaveDeviceTypeResult = 2018;</code>
     *
     * <pre>
     *添加或修改设备类型返回 仅仅定义消息id
     * </pre>
     */
    SCSaveDeviceTypeResult(34, 2018),
    /**
     * <code>SCDeleteDeviceTypeResult = 2019;</code>
     *
     * <pre>
     *删除设备类型返回
     * </pre>
     */
    SCDeleteDeviceTypeResult(35, 2019),
    /**
     * <code>SCDeleteDeviceBaseInfoResult = 2020;</code>
     *
     * <pre>
     *删除设备返回
     * </pre>
     */
    SCDeleteDeviceBaseInfoResult(36, 2020),
    /**
     * <code>SCSwitchDeviceTypeInfolistResult = 2021;</code>
     *
     * <pre>
     *远程开关类型列表返回
     * </pre>
     */
    SCSwitchDeviceTypeInfolistResult(37, 2021),
    /**
     * <code>SCSaveSwitchDeviceTypeResult = 2022;</code>
     *
     * <pre>
     *添加或修改远程开关类型返回 仅仅定义消息id
     * </pre>
     */
    SCSaveSwitchDeviceTypeResult(38, 2022),
    /**
     * <code>SCDeleteSwitchDeviceTypeResult = 2023;</code>
     *
     * <pre>
     *删除远程开关类型返回
     * </pre>
     */
    SCDeleteSwitchDeviceTypeResult(39, 2023),
    /**
     * <code>AccidentModel = 3000;</code>
     *
     * <pre>
     *预案模块
     * </pre>
     */
    AccidentModel(40, 3000),
    /**
     * <code>SCSaveMeasureTypeResult = 3001;</code>
     *
     * <pre>
     *添加或修改措施类型返回 仅仅定义消息id
     * </pre>
     */
    SCSaveMeasureTypeResult(41, 3001),
    /**
     * <code>SCDeleteMeasureTypeResult = 3002;</code>
     *
     * <pre>
     *删除措施类型返回
     * </pre>
     */
    SCDeleteMeasureTypeResult(42, 3002),
    /**
     * <code>SCMeasureTypelistResult = 3003;</code>
     *
     * <pre>
     *措施类型列表返回
     * </pre>
     */
    SCMeasureTypelistResult(43, 3003),
    /**
     * <code>SCMeasureInfoListResult = 3004;</code>
     *
     * <pre>
     *措施列表返回
     * </pre>
     */
    SCMeasureInfoListResult(44, 3004),
    /**
     * <code>SCSaveMeasureResult = 3005;</code>
     *
     * <pre>
     *添加或修改措施返回 仅仅定义消息id
     * </pre>
     */
    SCSaveMeasureResult(45, 3005),
    /**
     * <code>SCDeleteMeasureResult = 3006;</code>
     *
     * <pre>
     *删除措施返回
     * </pre>
     */
    SCDeleteMeasureResult(46, 3006),
    /**
     * <code>SCTaskTypeListResult = 3007;</code>
     *
     * <pre>
     *应急任务类型列表返回
     * </pre>
     */
    SCTaskTypeListResult(47, 3007),
    /**
     * <code>SCSaveTaskTypeResult = 3008;</code>
     *
     * <pre>
     *添加或修改应急任务类型返回 仅仅定义消息id
     * </pre>
     */
    SCSaveTaskTypeResult(48, 3008),
    /**
     * <code>SCDeleteTaskTypeResult = 3009;</code>
     *
     * <pre>
     *删除应急任务类型返回
     * </pre>
     */
    SCDeleteTaskTypeResult(49, 3009),
    /**
     * <code>SCSaveTaskInfoResult = 3010;</code>
     *
     * <pre>
     *添加或修改应急任务返回 仅仅定义消息id
     * </pre>
     */
    SCSaveTaskInfoResult(50, 3010),
    /**
     * <code>SCDeleteTaskInfoResult = 3011;</code>
     *
     * <pre>
     *删除应急任务返回
     * </pre>
     */
    SCDeleteTaskInfoResult(51, 3011),
    /**
     * <code>SCTaskInfoListResult = 3012;</code>
     *
     * <pre>
     *应急任务列表返回
     * </pre>
     */
    SCTaskInfoListResult(52, 3012),
    /**
     * <code>SCAccidentListResult = 3015;</code>
     *
     * <pre>
     *事故列表信息
     * </pre>
     */
    SCAccidentListResult(53, 3015),
    /**
     * <code>CSAddAccident = 3016;</code>
     *
     * <pre>
     *添加事故
     * </pre>
     */
    CSAddAccident(54, 3016),
    /**
     * <code>SCAddAccidentResult = 3017;</code>
     *
     * <pre>
     *添加事故返回
     * </pre>
     */
    SCAddAccidentResult(55, 3017),
    /**
     * <code>SCDeleteAccidentResult = 3018;</code>
     *
     * <pre>
     *删除事故返回
     * </pre>
     */
    SCDeleteAccidentResult(56, 3018),
    /**
     * <code>CSUpdateAccident = 3019;</code>
     *
     * <pre>
     *更新事故
     * </pre>
     */
    CSUpdateAccident(57, 3019),
    /**
     * <code>SCUpdateAccidentResult = 3020;</code>
     *
     * <pre>
     *更新事故返回
     * </pre>
     */
    SCUpdateAccidentResult(58, 3020),
    /**
     * <code>SCAccidentTypeListResult = 3021;</code>
     *
     * <pre>
     *事故类型列表返回
     * </pre>
     */
    SCAccidentTypeListResult(59, 3021),
    /**
     * <code>SCCharactorTypeListResult = 3022;</code>
     *
     * <pre>
     *角色类型列表返回
     * </pre>
     */
    SCCharactorTypeListResult(60, 3022),
    /**
     * <code>SCSaveCharactorTypeResult = 3023;</code>
     *
     * <pre>
     *添加或修改角色类型返回
     * </pre>
     */
    SCSaveCharactorTypeResult(61, 3023),
    /**
     * <code>SCDeleteCharactorTypeResult = 3024;</code>
     *
     * <pre>
     *删除角色类型返回
     * </pre>
     */
    SCDeleteCharactorTypeResult(62, 3024),
    /**
     * <code>SCCharacterListResult = 3025;</code>
     *
     * <pre>
     *角色列表返回
     * </pre>
     */
    SCCharacterListResult(63, 3025),
    /**
     * <code>SCSaveCharactorInfoResult = 3026;</code>
     *
     * <pre>
     *添加或修改角色返回
     * </pre>
     */
    SCSaveCharactorInfoResult(64, 3026),
    /**
     * <code>SCDeleteCharactorInfoResult = 3027;</code>
     *
     * <pre>
     *删除角色返回
     * </pre>
     */
    SCDeleteCharactorInfoResult(65, 3027),
    /**
     * <code>CSAddGroupInfo = 3028;</code>
     *
     * <pre>
     *添加队伍
     * </pre>
     */
    CSAddGroupInfo(66, 3028),
    /**
     * <code>SCAddGroupInfoResult = 3029;</code>
     *
     * <pre>
     *添加队伍返回
     * </pre>
     */
    SCAddGroupInfoResult(67, 3029),
    /**
     * <code>SCDeleteGroupInfoResult = 3030;</code>
     *
     * <pre>
     *删除队伍返回
     * </pre>
     */
    SCDeleteGroupInfoResult(68, 3030),
    /**
     * <code>CSUpdateGroupInfo = 3031;</code>
     *
     * <pre>
     *更新应急队伍
     * </pre>
     */
    CSUpdateGroupInfo(69, 3031),
    /**
     * <code>SCUpdateGroupInfoResult = 3032;</code>
     *
     * <pre>
     *更新应急队伍返回
     * </pre>
     */
    SCUpdateGroupInfoResult(70, 3032),
    /**
     * <code>SCGroupInfoListResult = 3033;</code>
     *
     * <pre>
     *应急队伍列表返回
     * </pre>
     */
    SCGroupInfoListResult(71, 3033),
    /**
     * <code>SCEvaluationInfoListResult = 3034;</code>
     *
     * <pre>
     *评估标准列表返回
     * </pre>
     */
    SCEvaluationInfoListResult(72, 3034),
    /**
     * <code>SCSaveEvaluationInfoResult = 3035;</code>
     *
     * <pre>
     *添加或修改评估标准返回
     * </pre>
     */
    SCSaveEvaluationInfoResult(73, 3035),
    /**
     * <code>SCDeleteEvaluationInfoResult = 3036;</code>
     *
     * <pre>
     *	删除评估标准返回
     * </pre>
     */
    SCDeleteEvaluationInfoResult(74, 3036),
    /**
     * <code>CSSceneEditLockStatList = 3037;</code>
     *
     * <pre>
     *场景编辑锁定状态列表
     * </pre>
     */
    CSSceneEditLockStatList(75, 3037),
    /**
     * <code>SCSceneEditLockStatListResult = 3038;</code>
     *
     * <pre>
     *场景编辑锁定状态列表 返回
     * </pre>
     */
    SCSceneEditLockStatListResult(76, 3038),
    /**
     * <code>CSSchemeEditLockStatList = 3039;</code>
     *
     * <pre>
     *预案编辑锁定状态列表
     * </pre>
     */
    CSSchemeEditLockStatList(77, 3039),
    /**
     * <code>SCSchemeEditLockStatListResult = 3040;</code>
     *
     * <pre>
     *预案编辑锁定状态列表 返回
     * </pre>
     */
    SCSchemeEditLockStatListResult(78, 3040),
    /**
     * <code>CSUpdateEditLockStat = 3041;</code>
     *
     * <pre>
     *更新编辑锁定状态
     * </pre>
     */
    CSUpdateEditLockStat(79, 3041),
    /**
     * <code>SCUpdateEditLockStatListResult = 3042;</code>
     *
     * <pre>
     *更新编辑锁定状态 返回
     * </pre>
     */
    SCUpdateEditLockStatListResult(80, 3042),
    /**
     * <code>CSDeleteCharactorType = 3043;</code>
     *
     * <pre>
     *删除角色类型
     * </pre>
     */
    CSDeleteCharactorType(81, 3043),
    /**
     * <code>CommenModel = 9000;</code>
     *
     * <pre>
     *通用查询保存模块
     * </pre>
     */
    CommenModel(82, 9000),
    /**
     * <code>CSCommonQuery = 9001;</code>
     *
     * <pre>
     *通用查询
     * </pre>
     */
    CSCommonQuery(83, 9001),
    /**
     * <code>CSCommonSave = 9002;</code>
     *
     * <pre>
     *通用保存
     * </pre>
     */
    CSCommonSave(84, 9002),
    /**
     * <code>CSCommonRemove = 9003;</code>
     *
     * <pre>
     *通用删除
     * </pre>
     */
    CSCommonRemove(85, 9003),
    /**
     * <code>SCCommonResult = 9004;</code>
     *
     * <pre>
     *通用返回结果
     * </pre>
     */
    SCCommonResult(86, 9004),
    ;

    /**
     * <code>LoginModel = 0;</code>
     *
     * <pre>
     *登录模块
     * </pre>
     */
    public static final int LoginModel_VALUE = 0;
    /**
     * <code>CSLogin = 1;</code>
     *
     * <pre>
     * 登录
     * </pre>
     */
    public static final int CSLogin_VALUE = 1;
    /**
     * <code>SCLoginResult = 2;</code>
     *
     * <pre>
     *登录返回
     * </pre>
     */
    public static final int SCLoginResult_VALUE = 2;
    /**
     * <code>CSLogout = 3;</code>
     *
     * <pre>
     *退出
     * </pre>
     */
    public static final int CSLogout_VALUE = 3;
    /**
     * <code>SCLogoutResult = 4;</code>
     *
     * <pre>
     *退出返回
     * </pre>
     */
    public static final int SCLogoutResult_VALUE = 4;
    /**
     * <code>SCFeedBackSaveResult = 5;</code>
     *
     * <pre>
     *添加或修改反馈意见返回  仅仅定义消息id
     * </pre>
     */
    public static final int SCFeedBackSaveResult_VALUE = 5;
    /**
     * <code>SystemModel = 1000;</code>
     *
     * <pre>
     *系统管理模块
     * </pre>
     */
    public static final int SystemModel_VALUE = 1000;
    /**
     * <code>SCOrganizeInfoListResult = 1001;</code>
     *
     * <pre>
     *机构管理列表 返回   使用通用查询请求
     * </pre>
     */
    public static final int SCOrganizeInfoListResult_VALUE = 1001;
    /**
     * <code>SCSaveOrganizeInfoResult = 1002;</code>
     *
     * <pre>
     *添加或修改机构返回  仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveOrganizeInfoResult_VALUE = 1002;
    /**
     * <code>SCDeleteOrganizeInfoResult = 1003;</code>
     *
     * <pre>
     *删除机构管理返回    
     * </pre>
     */
    public static final int SCDeleteOrganizeInfoResult_VALUE = 1003;
    /**
     * <code>SCUserInfoListResult = 1004;</code>
     *
     * <pre>
     *用户列表返回    使用通用查询请求
     * </pre>
     */
    public static final int SCUserInfoListResult_VALUE = 1004;
    /**
     * <code>SCSaveUserInfoResult = 1005;</code>
     *
     * <pre>
     *添加或修用户返回
     * </pre>
     */
    public static final int SCSaveUserInfoResult_VALUE = 1005;
    /**
     * <code>SCDeleteUserInfoResult = 1006;</code>
     *
     * <pre>
     *删除用户返回
     * </pre>
     */
    public static final int SCDeleteUserInfoResult_VALUE = 1006;
    /**
     * <code>SCAuthorityListResult = 1007;</code>
     *
     * <pre>
     *权限列表返回		使用通用查询请求
     * </pre>
     */
    public static final int SCAuthorityListResult_VALUE = 1007;
    /**
     * <code>SCLogInfoListResult = 1008;</code>
     *
     * <pre>
     *日志列表返回  使用通用查询请求
     * </pre>
     */
    public static final int SCLogInfoListResult_VALUE = 1008;
    /**
     * <code>SCDeleteLogInfoResult = 1009;</code>
     *
     * <pre>
     *删除日志返回
     * </pre>
     */
    public static final int SCDeleteLogInfoResult_VALUE = 1009;
    /**
     * <code>SceneModel = 2000;</code>
     *
     * <pre>
     *场景模块
     * </pre>
     */
    public static final int SceneModel_VALUE = 2000;
    /**
     * <code>SCCompanyInfoListResult = 2001;</code>
     *
     * <pre>
     *企业列表返回 	使用通用查询请求
     * </pre>
     */
    public static final int SCCompanyInfoListResult_VALUE = 2001;
    /**
     * <code>SCSaveCompanyInfoResult = 2002;</code>
     *
     * <pre>
     *添加或修改企业返回  仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveCompanyInfoResult_VALUE = 2002;
    /**
     * <code>SCDeleteCompanyInfoResult = 2003;</code>
     *
     * <pre>
     *删除企业返回
     * </pre>
     */
    public static final int SCDeleteCompanyInfoResult_VALUE = 2003;
    /**
     * <code>SCIndustryInfoListResult = 2004;</code>
     *
     * <pre>
     *行业列表返回  使用通用查询请求
     * </pre>
     */
    public static final int SCIndustryInfoListResult_VALUE = 2004;
    /**
     * <code>SCSaveIndustryInfoResult = 2005;</code>
     *
     * <pre>
     *添加或修改行业返回  仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveIndustryInfoResult_VALUE = 2005;
    /**
     * <code>SCDeleteIndustryInfoResult = 2006;</code>
     *
     * <pre>
     *删除行业返回
     * </pre>
     */
    public static final int SCDeleteIndustryInfoResult_VALUE = 2006;
    /**
     * <code>SCSaveDeviceInfoResult = 2007;</code>
     *
     * <pre>
     *添加或修改设备信息
     * </pre>
     */
    public static final int SCSaveDeviceInfoResult_VALUE = 2007;
    /**
     * <code>SCDeviceBaseInfolistResult = 2008;</code>
     *
     * <pre>
     *请求设备列表 通用查询
     * </pre>
     */
    public static final int SCDeviceBaseInfolistResult_VALUE = 2008;
    /**
     * <code>SCSaveSceneInfoResult = 2009;</code>
     *
     * <pre>
     *添加或修改场景返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveSceneInfoResult_VALUE = 2009;
    /**
     * <code>SCSceneInfoListResult = 2010;</code>
     *
     * <pre>
     *场景列表返回  使用通用查询请求
     * </pre>
     */
    public static final int SCSceneInfoListResult_VALUE = 2010;
    /**
     * <code>SCDeleteSceneInfoResult = 2011;</code>
     *
     * <pre>
     *删除场景返回
     * </pre>
     */
    public static final int SCDeleteSceneInfoResult_VALUE = 2011;
    /**
     * <code>SCSwitchDeviceInfolistResult = 2012;</code>
     *
     * <pre>
     *远程开关列表 使用通用查询请求
     * </pre>
     */
    public static final int SCSwitchDeviceInfolistResult_VALUE = 2012;
    /**
     * <code>SCSaveSwitchDeviceInfoResult = 2013;</code>
     *
     * <pre>
     *添加或修改远程开关返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveSwitchDeviceInfoResult_VALUE = 2013;
    /**
     * <code>SCDeleteSwitchDeviceInfoResult = 2014;</code>
     *
     * <pre>
     *删除远程开关返回
     * </pre>
     */
    public static final int SCDeleteSwitchDeviceInfoResult_VALUE = 2014;
    /**
     * <code>SCBundingSwitchDeviceResult = 2015;</code>
     *
     * <pre>
     *绑定远程开关返回  仅仅定义消息id
     * </pre>
     */
    public static final int SCBundingSwitchDeviceResult_VALUE = 2015;
    /**
     * <code>SCRemoveBundingSwitchDeviceResult = 2016;</code>
     *
     * <pre>
     *解绑远程开关返回
     * </pre>
     */
    public static final int SCRemoveBundingSwitchDeviceResult_VALUE = 2016;
    /**
     * <code>SCDeviceTypelistResult = 2017;</code>
     *
     * <pre>
     *设备类型列表返回
     * </pre>
     */
    public static final int SCDeviceTypelistResult_VALUE = 2017;
    /**
     * <code>SCSaveDeviceTypeResult = 2018;</code>
     *
     * <pre>
     *添加或修改设备类型返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveDeviceTypeResult_VALUE = 2018;
    /**
     * <code>SCDeleteDeviceTypeResult = 2019;</code>
     *
     * <pre>
     *删除设备类型返回
     * </pre>
     */
    public static final int SCDeleteDeviceTypeResult_VALUE = 2019;
    /**
     * <code>SCDeleteDeviceBaseInfoResult = 2020;</code>
     *
     * <pre>
     *删除设备返回
     * </pre>
     */
    public static final int SCDeleteDeviceBaseInfoResult_VALUE = 2020;
    /**
     * <code>SCSwitchDeviceTypeInfolistResult = 2021;</code>
     *
     * <pre>
     *远程开关类型列表返回
     * </pre>
     */
    public static final int SCSwitchDeviceTypeInfolistResult_VALUE = 2021;
    /**
     * <code>SCSaveSwitchDeviceTypeResult = 2022;</code>
     *
     * <pre>
     *添加或修改远程开关类型返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveSwitchDeviceTypeResult_VALUE = 2022;
    /**
     * <code>SCDeleteSwitchDeviceTypeResult = 2023;</code>
     *
     * <pre>
     *删除远程开关类型返回
     * </pre>
     */
    public static final int SCDeleteSwitchDeviceTypeResult_VALUE = 2023;
    /**
     * <code>AccidentModel = 3000;</code>
     *
     * <pre>
     *预案模块
     * </pre>
     */
    public static final int AccidentModel_VALUE = 3000;
    /**
     * <code>SCSaveMeasureTypeResult = 3001;</code>
     *
     * <pre>
     *添加或修改措施类型返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveMeasureTypeResult_VALUE = 3001;
    /**
     * <code>SCDeleteMeasureTypeResult = 3002;</code>
     *
     * <pre>
     *删除措施类型返回
     * </pre>
     */
    public static final int SCDeleteMeasureTypeResult_VALUE = 3002;
    /**
     * <code>SCMeasureTypelistResult = 3003;</code>
     *
     * <pre>
     *措施类型列表返回
     * </pre>
     */
    public static final int SCMeasureTypelistResult_VALUE = 3003;
    /**
     * <code>SCMeasureInfoListResult = 3004;</code>
     *
     * <pre>
     *措施列表返回
     * </pre>
     */
    public static final int SCMeasureInfoListResult_VALUE = 3004;
    /**
     * <code>SCSaveMeasureResult = 3005;</code>
     *
     * <pre>
     *添加或修改措施返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveMeasureResult_VALUE = 3005;
    /**
     * <code>SCDeleteMeasureResult = 3006;</code>
     *
     * <pre>
     *删除措施返回
     * </pre>
     */
    public static final int SCDeleteMeasureResult_VALUE = 3006;
    /**
     * <code>SCTaskTypeListResult = 3007;</code>
     *
     * <pre>
     *应急任务类型列表返回
     * </pre>
     */
    public static final int SCTaskTypeListResult_VALUE = 3007;
    /**
     * <code>SCSaveTaskTypeResult = 3008;</code>
     *
     * <pre>
     *添加或修改应急任务类型返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveTaskTypeResult_VALUE = 3008;
    /**
     * <code>SCDeleteTaskTypeResult = 3009;</code>
     *
     * <pre>
     *删除应急任务类型返回
     * </pre>
     */
    public static final int SCDeleteTaskTypeResult_VALUE = 3009;
    /**
     * <code>SCSaveTaskInfoResult = 3010;</code>
     *
     * <pre>
     *添加或修改应急任务返回 仅仅定义消息id
     * </pre>
     */
    public static final int SCSaveTaskInfoResult_VALUE = 3010;
    /**
     * <code>SCDeleteTaskInfoResult = 3011;</code>
     *
     * <pre>
     *删除应急任务返回
     * </pre>
     */
    public static final int SCDeleteTaskInfoResult_VALUE = 3011;
    /**
     * <code>SCTaskInfoListResult = 3012;</code>
     *
     * <pre>
     *应急任务列表返回
     * </pre>
     */
    public static final int SCTaskInfoListResult_VALUE = 3012;
    /**
     * <code>SCAccidentListResult = 3015;</code>
     *
     * <pre>
     *事故列表信息
     * </pre>
     */
    public static final int SCAccidentListResult_VALUE = 3015;
    /**
     * <code>CSAddAccident = 3016;</code>
     *
     * <pre>
     *添加事故
     * </pre>
     */
    public static final int CSAddAccident_VALUE = 3016;
    /**
     * <code>SCAddAccidentResult = 3017;</code>
     *
     * <pre>
     *添加事故返回
     * </pre>
     */
    public static final int SCAddAccidentResult_VALUE = 3017;
    /**
     * <code>SCDeleteAccidentResult = 3018;</code>
     *
     * <pre>
     *删除事故返回
     * </pre>
     */
    public static final int SCDeleteAccidentResult_VALUE = 3018;
    /**
     * <code>CSUpdateAccident = 3019;</code>
     *
     * <pre>
     *更新事故
     * </pre>
     */
    public static final int CSUpdateAccident_VALUE = 3019;
    /**
     * <code>SCUpdateAccidentResult = 3020;</code>
     *
     * <pre>
     *更新事故返回
     * </pre>
     */
    public static final int SCUpdateAccidentResult_VALUE = 3020;
    /**
     * <code>SCAccidentTypeListResult = 3021;</code>
     *
     * <pre>
     *事故类型列表返回
     * </pre>
     */
    public static final int SCAccidentTypeListResult_VALUE = 3021;
    /**
     * <code>SCCharactorTypeListResult = 3022;</code>
     *
     * <pre>
     *角色类型列表返回
     * </pre>
     */
    public static final int SCCharactorTypeListResult_VALUE = 3022;
    /**
     * <code>SCSaveCharactorTypeResult = 3023;</code>
     *
     * <pre>
     *添加或修改角色类型返回
     * </pre>
     */
    public static final int SCSaveCharactorTypeResult_VALUE = 3023;
    /**
     * <code>SCDeleteCharactorTypeResult = 3024;</code>
     *
     * <pre>
     *删除角色类型返回
     * </pre>
     */
    public static final int SCDeleteCharactorTypeResult_VALUE = 3024;
    /**
     * <code>SCCharacterListResult = 3025;</code>
     *
     * <pre>
     *角色列表返回
     * </pre>
     */
    public static final int SCCharacterListResult_VALUE = 3025;
    /**
     * <code>SCSaveCharactorInfoResult = 3026;</code>
     *
     * <pre>
     *添加或修改角色返回
     * </pre>
     */
    public static final int SCSaveCharactorInfoResult_VALUE = 3026;
    /**
     * <code>SCDeleteCharactorInfoResult = 3027;</code>
     *
     * <pre>
     *删除角色返回
     * </pre>
     */
    public static final int SCDeleteCharactorInfoResult_VALUE = 3027;
    /**
     * <code>CSAddGroupInfo = 3028;</code>
     *
     * <pre>
     *添加队伍
     * </pre>
     */
    public static final int CSAddGroupInfo_VALUE = 3028;
    /**
     * <code>SCAddGroupInfoResult = 3029;</code>
     *
     * <pre>
     *添加队伍返回
     * </pre>
     */
    public static final int SCAddGroupInfoResult_VALUE = 3029;
    /**
     * <code>SCDeleteGroupInfoResult = 3030;</code>
     *
     * <pre>
     *删除队伍返回
     * </pre>
     */
    public static final int SCDeleteGroupInfoResult_VALUE = 3030;
    /**
     * <code>CSUpdateGroupInfo = 3031;</code>
     *
     * <pre>
     *更新应急队伍
     * </pre>
     */
    public static final int CSUpdateGroupInfo_VALUE = 3031;
    /**
     * <code>SCUpdateGroupInfoResult = 3032;</code>
     *
     * <pre>
     *更新应急队伍返回
     * </pre>
     */
    public static final int SCUpdateGroupInfoResult_VALUE = 3032;
    /**
     * <code>SCGroupInfoListResult = 3033;</code>
     *
     * <pre>
     *应急队伍列表返回
     * </pre>
     */
    public static final int SCGroupInfoListResult_VALUE = 3033;
    /**
     * <code>SCEvaluationInfoListResult = 3034;</code>
     *
     * <pre>
     *评估标准列表返回
     * </pre>
     */
    public static final int SCEvaluationInfoListResult_VALUE = 3034;
    /**
     * <code>SCSaveEvaluationInfoResult = 3035;</code>
     *
     * <pre>
     *添加或修改评估标准返回
     * </pre>
     */
    public static final int SCSaveEvaluationInfoResult_VALUE = 3035;
    /**
     * <code>SCDeleteEvaluationInfoResult = 3036;</code>
     *
     * <pre>
     *	删除评估标准返回
     * </pre>
     */
    public static final int SCDeleteEvaluationInfoResult_VALUE = 3036;
    /**
     * <code>CSSceneEditLockStatList = 3037;</code>
     *
     * <pre>
     *场景编辑锁定状态列表
     * </pre>
     */
    public static final int CSSceneEditLockStatList_VALUE = 3037;
    /**
     * <code>SCSceneEditLockStatListResult = 3038;</code>
     *
     * <pre>
     *场景编辑锁定状态列表 返回
     * </pre>
     */
    public static final int SCSceneEditLockStatListResult_VALUE = 3038;
    /**
     * <code>CSSchemeEditLockStatList = 3039;</code>
     *
     * <pre>
     *预案编辑锁定状态列表
     * </pre>
     */
    public static final int CSSchemeEditLockStatList_VALUE = 3039;
    /**
     * <code>SCSchemeEditLockStatListResult = 3040;</code>
     *
     * <pre>
     *预案编辑锁定状态列表 返回
     * </pre>
     */
    public static final int SCSchemeEditLockStatListResult_VALUE = 3040;
    /**
     * <code>CSUpdateEditLockStat = 3041;</code>
     *
     * <pre>
     *更新编辑锁定状态
     * </pre>
     */
    public static final int CSUpdateEditLockStat_VALUE = 3041;
    /**
     * <code>SCUpdateEditLockStatListResult = 3042;</code>
     *
     * <pre>
     *更新编辑锁定状态 返回
     * </pre>
     */
    public static final int SCUpdateEditLockStatListResult_VALUE = 3042;
    /**
     * <code>CSDeleteCharactorType = 3043;</code>
     *
     * <pre>
     *删除角色类型
     * </pre>
     */
    public static final int CSDeleteCharactorType_VALUE = 3043;
    /**
     * <code>CommenModel = 9000;</code>
     *
     * <pre>
     *通用查询保存模块
     * </pre>
     */
    public static final int CommenModel_VALUE = 9000;
    /**
     * <code>CSCommonQuery = 9001;</code>
     *
     * <pre>
     *通用查询
     * </pre>
     */
    public static final int CSCommonQuery_VALUE = 9001;
    /**
     * <code>CSCommonSave = 9002;</code>
     *
     * <pre>
     *通用保存
     * </pre>
     */
    public static final int CSCommonSave_VALUE = 9002;
    /**
     * <code>CSCommonRemove = 9003;</code>
     *
     * <pre>
     *通用删除
     * </pre>
     */
    public static final int CSCommonRemove_VALUE = 9003;
    /**
     * <code>SCCommonResult = 9004;</code>
     *
     * <pre>
     *通用返回结果
     * </pre>
     */
    public static final int SCCommonResult_VALUE = 9004;


    public final int getNumber() { return value; }

    public static MessageID valueOf(int value) {
      switch (value) {
        case 0: return LoginModel;
        case 1: return CSLogin;
        case 2: return SCLoginResult;
        case 3: return CSLogout;
        case 4: return SCLogoutResult;
        case 5: return SCFeedBackSaveResult;
        case 1000: return SystemModel;
        case 1001: return SCOrganizeInfoListResult;
        case 1002: return SCSaveOrganizeInfoResult;
        case 1003: return SCDeleteOrganizeInfoResult;
        case 1004: return SCUserInfoListResult;
        case 1005: return SCSaveUserInfoResult;
        case 1006: return SCDeleteUserInfoResult;
        case 1007: return SCAuthorityListResult;
        case 1008: return SCLogInfoListResult;
        case 1009: return SCDeleteLogInfoResult;
        case 2000: return SceneModel;
        case 2001: return SCCompanyInfoListResult;
        case 2002: return SCSaveCompanyInfoResult;
        case 2003: return SCDeleteCompanyInfoResult;
        case 2004: return SCIndustryInfoListResult;
        case 2005: return SCSaveIndustryInfoResult;
        case 2006: return SCDeleteIndustryInfoResult;
        case 2007: return SCSaveDeviceInfoResult;
        case 2008: return SCDeviceBaseInfolistResult;
        case 2009: return SCSaveSceneInfoResult;
        case 2010: return SCSceneInfoListResult;
        case 2011: return SCDeleteSceneInfoResult;
        case 2012: return SCSwitchDeviceInfolistResult;
        case 2013: return SCSaveSwitchDeviceInfoResult;
        case 2014: return SCDeleteSwitchDeviceInfoResult;
        case 2015: return SCBundingSwitchDeviceResult;
        case 2016: return SCRemoveBundingSwitchDeviceResult;
        case 2017: return SCDeviceTypelistResult;
        case 2018: return SCSaveDeviceTypeResult;
        case 2019: return SCDeleteDeviceTypeResult;
        case 2020: return SCDeleteDeviceBaseInfoResult;
        case 2021: return SCSwitchDeviceTypeInfolistResult;
        case 2022: return SCSaveSwitchDeviceTypeResult;
        case 2023: return SCDeleteSwitchDeviceTypeResult;
        case 3000: return AccidentModel;
        case 3001: return SCSaveMeasureTypeResult;
        case 3002: return SCDeleteMeasureTypeResult;
        case 3003: return SCMeasureTypelistResult;
        case 3004: return SCMeasureInfoListResult;
        case 3005: return SCSaveMeasureResult;
        case 3006: return SCDeleteMeasureResult;
        case 3007: return SCTaskTypeListResult;
        case 3008: return SCSaveTaskTypeResult;
        case 3009: return SCDeleteTaskTypeResult;
        case 3010: return SCSaveTaskInfoResult;
        case 3011: return SCDeleteTaskInfoResult;
        case 3012: return SCTaskInfoListResult;
        case 3015: return SCAccidentListResult;
        case 3016: return CSAddAccident;
        case 3017: return SCAddAccidentResult;
        case 3018: return SCDeleteAccidentResult;
        case 3019: return CSUpdateAccident;
        case 3020: return SCUpdateAccidentResult;
        case 3021: return SCAccidentTypeListResult;
        case 3022: return SCCharactorTypeListResult;
        case 3023: return SCSaveCharactorTypeResult;
        case 3024: return SCDeleteCharactorTypeResult;
        case 3025: return SCCharacterListResult;
        case 3026: return SCSaveCharactorInfoResult;
        case 3027: return SCDeleteCharactorInfoResult;
        case 3028: return CSAddGroupInfo;
        case 3029: return SCAddGroupInfoResult;
        case 3030: return SCDeleteGroupInfoResult;
        case 3031: return CSUpdateGroupInfo;
        case 3032: return SCUpdateGroupInfoResult;
        case 3033: return SCGroupInfoListResult;
        case 3034: return SCEvaluationInfoListResult;
        case 3035: return SCSaveEvaluationInfoResult;
        case 3036: return SCDeleteEvaluationInfoResult;
        case 3037: return CSSceneEditLockStatList;
        case 3038: return SCSceneEditLockStatListResult;
        case 3039: return CSSchemeEditLockStatList;
        case 3040: return SCSchemeEditLockStatListResult;
        case 3041: return CSUpdateEditLockStat;
        case 3042: return SCUpdateEditLockStatListResult;
        case 3043: return CSDeleteCharactorType;
        case 9000: return CommenModel;
        case 9001: return CSCommonQuery;
        case 9002: return CSCommonSave;
        case 9003: return CSCommonRemove;
        case 9004: return SCCommonResult;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MessageID>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MessageID>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MessageID>() {
            public MessageID findValueByNumber(int number) {
              return MessageID.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ssit.proto.MessageProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final MessageID[] VALUES = values();

    public static MessageID valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MessageID(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SSIT.proto.MessageID)
  }

  /**
   * Protobuf enum {@code SSIT.proto.QueryKey}
   */
  public enum QueryKey
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>sallOrganizeInfoList = 0;</code>
     *
     * <pre>
     *组织信息列表
     * </pre>
     */
    sallOrganizeInfoList(0, 0),
    /**
     * <code>userInfoList = 1;</code>
     *
     * <pre>
     *用户信息列表
     * </pre>
     */
    userInfoList(1, 1),
    /**
     * <code>powerList = 2;</code>
     *
     * <pre>
     * 权限信息列表
     * </pre>
     */
    powerList(2, 2),
    /**
     * <code>logInfoList = 3;</code>
     *
     * <pre>
     * 日志信息列表	
     * </pre>
     */
    logInfoList(3, 3),
    /**
     * <code>companyList = 4;</code>
     *
     * <pre>
     *企业信息列表
     * </pre>
     */
    companyList(4, 4),
    /**
     * <code>industryInfoList = 5;</code>
     *
     * <pre>
     *行业信息列表
     * </pre>
     */
    industryInfoList(5, 5),
    /**
     * <code>deviceList = 6;</code>
     *
     * <pre>
     *设备信息列表
     * </pre>
     */
    deviceList(6, 6),
    /**
     * <code>sceneMgrInfoList = 7;</code>
     *
     * <pre>
     *场景信息列表
     * </pre>
     */
    sceneMgrInfoList(7, 7),
    /**
     * <code>switchDeviceList = 8;</code>
     *
     * <pre>
     *远程开关信息列表
     * </pre>
     */
    switchDeviceList(8, 8),
    /**
     * <code>switchDeviceTypeList = 9;</code>
     *
     * <pre>
     *远程开关类型列表
     * </pre>
     */
    switchDeviceTypeList(9, 9),
    /**
     * <code>switchBundingList = 10;</code>
     *
     * <pre>
     *远程开关绑定列表
     * </pre>
     */
    switchBundingList(10, 10),
    /**
     * <code>deviceTypeList = 11;</code>
     *
     * <pre>
     *设备类型列表
     * </pre>
     */
    deviceTypeList(11, 11),
    /**
     * <code>skillTypeList = 12;</code>
     *
     * <pre>
     *措施类型列表
     * </pre>
     */
    skillTypeList(12, 12),
    /**
     * <code>skillList = 13;</code>
     *
     * <pre>
     *措施列表
     * </pre>
     */
    skillList(13, 13),
    /**
     * <code>taskTypeList = 14;</code>
     *
     * <pre>
     *应急任务类型列表
     * </pre>
     */
    taskTypeList(14, 14),
    /**
     * <code>taskInfoList = 15;</code>
     *
     * <pre>
     *应急任务列表
     * </pre>
     */
    taskInfoList(15, 15),
    /**
     * <code>accidentInfoList = 16;</code>
     *
     * <pre>
     *事故信息列表
     * </pre>
     */
    accidentInfoList(16, 16),
    /**
     * <code>accidentTypeList = 17;</code>
     *
     * <pre>
     *事故类型列表
     * </pre>
     */
    accidentTypeList(17, 17),
    /**
     * <code>charactorTypeList = 18;</code>
     *
     * <pre>
     *角色类型列表
     * </pre>
     */
    charactorTypeList(18, 18),
    /**
     * <code>charactorInfoList = 19;</code>
     *
     * <pre>
     *角色列表
     * </pre>
     */
    charactorInfoList(19, 19),
    /**
     * <code>evaluationList = 20;</code>
     *
     * <pre>
     *评估标准列表
     * </pre>
     */
    evaluationList(20, 20),
    /**
     * <code>groupInfoList = 21;</code>
     *
     * <pre>
     *应急组列表
     * </pre>
     */
    groupInfoList(21, 21),
    ;

    /**
     * <code>sallOrganizeInfoList = 0;</code>
     *
     * <pre>
     *组织信息列表
     * </pre>
     */
    public static final int sallOrganizeInfoList_VALUE = 0;
    /**
     * <code>userInfoList = 1;</code>
     *
     * <pre>
     *用户信息列表
     * </pre>
     */
    public static final int userInfoList_VALUE = 1;
    /**
     * <code>powerList = 2;</code>
     *
     * <pre>
     * 权限信息列表
     * </pre>
     */
    public static final int powerList_VALUE = 2;
    /**
     * <code>logInfoList = 3;</code>
     *
     * <pre>
     * 日志信息列表	
     * </pre>
     */
    public static final int logInfoList_VALUE = 3;
    /**
     * <code>companyList = 4;</code>
     *
     * <pre>
     *企业信息列表
     * </pre>
     */
    public static final int companyList_VALUE = 4;
    /**
     * <code>industryInfoList = 5;</code>
     *
     * <pre>
     *行业信息列表
     * </pre>
     */
    public static final int industryInfoList_VALUE = 5;
    /**
     * <code>deviceList = 6;</code>
     *
     * <pre>
     *设备信息列表
     * </pre>
     */
    public static final int deviceList_VALUE = 6;
    /**
     * <code>sceneMgrInfoList = 7;</code>
     *
     * <pre>
     *场景信息列表
     * </pre>
     */
    public static final int sceneMgrInfoList_VALUE = 7;
    /**
     * <code>switchDeviceList = 8;</code>
     *
     * <pre>
     *远程开关信息列表
     * </pre>
     */
    public static final int switchDeviceList_VALUE = 8;
    /**
     * <code>switchDeviceTypeList = 9;</code>
     *
     * <pre>
     *远程开关类型列表
     * </pre>
     */
    public static final int switchDeviceTypeList_VALUE = 9;
    /**
     * <code>switchBundingList = 10;</code>
     *
     * <pre>
     *远程开关绑定列表
     * </pre>
     */
    public static final int switchBundingList_VALUE = 10;
    /**
     * <code>deviceTypeList = 11;</code>
     *
     * <pre>
     *设备类型列表
     * </pre>
     */
    public static final int deviceTypeList_VALUE = 11;
    /**
     * <code>skillTypeList = 12;</code>
     *
     * <pre>
     *措施类型列表
     * </pre>
     */
    public static final int skillTypeList_VALUE = 12;
    /**
     * <code>skillList = 13;</code>
     *
     * <pre>
     *措施列表
     * </pre>
     */
    public static final int skillList_VALUE = 13;
    /**
     * <code>taskTypeList = 14;</code>
     *
     * <pre>
     *应急任务类型列表
     * </pre>
     */
    public static final int taskTypeList_VALUE = 14;
    /**
     * <code>taskInfoList = 15;</code>
     *
     * <pre>
     *应急任务列表
     * </pre>
     */
    public static final int taskInfoList_VALUE = 15;
    /**
     * <code>accidentInfoList = 16;</code>
     *
     * <pre>
     *事故信息列表
     * </pre>
     */
    public static final int accidentInfoList_VALUE = 16;
    /**
     * <code>accidentTypeList = 17;</code>
     *
     * <pre>
     *事故类型列表
     * </pre>
     */
    public static final int accidentTypeList_VALUE = 17;
    /**
     * <code>charactorTypeList = 18;</code>
     *
     * <pre>
     *角色类型列表
     * </pre>
     */
    public static final int charactorTypeList_VALUE = 18;
    /**
     * <code>charactorInfoList = 19;</code>
     *
     * <pre>
     *角色列表
     * </pre>
     */
    public static final int charactorInfoList_VALUE = 19;
    /**
     * <code>evaluationList = 20;</code>
     *
     * <pre>
     *评估标准列表
     * </pre>
     */
    public static final int evaluationList_VALUE = 20;
    /**
     * <code>groupInfoList = 21;</code>
     *
     * <pre>
     *应急组列表
     * </pre>
     */
    public static final int groupInfoList_VALUE = 21;


    public final int getNumber() { return value; }

    public static QueryKey valueOf(int value) {
      switch (value) {
        case 0: return sallOrganizeInfoList;
        case 1: return userInfoList;
        case 2: return powerList;
        case 3: return logInfoList;
        case 4: return companyList;
        case 5: return industryInfoList;
        case 6: return deviceList;
        case 7: return sceneMgrInfoList;
        case 8: return switchDeviceList;
        case 9: return switchDeviceTypeList;
        case 10: return switchBundingList;
        case 11: return deviceTypeList;
        case 12: return skillTypeList;
        case 13: return skillList;
        case 14: return taskTypeList;
        case 15: return taskInfoList;
        case 16: return accidentInfoList;
        case 17: return accidentTypeList;
        case 18: return charactorTypeList;
        case 19: return charactorInfoList;
        case 20: return evaluationList;
        case 21: return groupInfoList;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<QueryKey>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<QueryKey>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<QueryKey>() {
            public QueryKey findValueByNumber(int number) {
              return QueryKey.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ssit.proto.MessageProto.getDescriptor().getEnumTypes().get(1);
    }

    private static final QueryKey[] VALUES = values();

    public static QueryKey valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private QueryKey(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SSIT.proto.QueryKey)
  }

  /**
   * Protobuf enum {@code SSIT.proto.SaveTarget}
   */
  public enum SaveTarget
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>organization = 0;</code>
     *
     * <pre>
     *organization	
     * </pre>
     */
    organization(0, 0),
    /**
     * <code>user = 1;</code>
     *
     * <pre>
     *user	
     * </pre>
     */
    user(1, 1),
    /**
     * <code>log = 2;</code>
     *
     * <pre>
     *log
     * </pre>
     */
    log(2, 2),
    /**
     * <code>feed_back = 3;</code>
     *
     * <pre>
     *feed_back
     * </pre>
     */
    feed_back(3, 3),
    /**
     * <code>company = 4;</code>
     *
     * <pre>
     *company
     * </pre>
     */
    company(4, 4),
    /**
     * <code>industry = 5;</code>
     *
     * <pre>
     *industry
     * </pre>
     */
    industry(5, 5),
    /**
     * <code>deviceinfo = 6;</code>
     *
     * <pre>
     *deviceinfo
     * </pre>
     */
    deviceinfo(6, 6),
    /**
     * <code>drillscene = 7;</code>
     *
     * <pre>
     *drillscene
     * </pre>
     */
    drillscene(7, 7),
    /**
     * <code>switchdevice = 8;</code>
     *
     * <pre>
     *switchdevice
     * </pre>
     */
    switchdevice(8, 8),
    /**
     * <code>switchdeviceagent = 9;</code>
     *
     * <pre>
     *switchdeviceagent
     * </pre>
     */
    switchdeviceagent(9, 9),
    /**
     * <code>devicetype = 10;</code>
     *
     * <pre>
     *devicetype
     * </pre>
     */
    devicetype(10, 10),
    /**
     * <code>drillskilltype = 11;</code>
     *
     * <pre>
     *drillskilltype
     * </pre>
     */
    drillskilltype(11, 11),
    /**
     * <code>drillskill = 12;</code>
     *
     * <pre>
     *drillskill
     * </pre>
     */
    drillskill(12, 12),
    /**
     * <code>drillmissiontype = 13;</code>
     *
     * <pre>
     *drillmissiontype
     * </pre>
     */
    drillmissiontype(13, 13),
    /**
     * <code>drillmission = 14;</code>
     *
     * <pre>
     *drillmission
     * </pre>
     */
    drillmission(14, 14),
    /**
     * <code>drillmissionpoolagent = 15;</code>
     *
     * <pre>
     *drillmissionpoolagent
     * </pre>
     */
    drillmissionpoolagent(15, 15),
    /**
     * <code>switchdevicetype = 16;</code>
     *
     * <pre>
     *switchdevicetype
     * </pre>
     */
    switchdevicetype(16, 16),
    /**
     * <code>drillscheme = 17;</code>
     *
     * <pre>
     *drillscheme
     * </pre>
     */
    drillscheme(17, 17),
    /**
     * <code>drillcharactertype = 18;</code>
     *
     * <pre>
     *drillcharactertype
     * </pre>
     */
    drillcharactertype(18, 18),
    /**
     * <code>drillcharacter = 19;</code>
     *
     * <pre>
     *drillcharacter
     * </pre>
     */
    drillcharacter(19, 19),
    /**
     * <code>drillgroup = 20;</code>
     *
     * <pre>
     *drillgroup
     * </pre>
     */
    drillgroup(20, 20),
    /**
     * <code>drillevaluate = 21;</code>
     *
     * <pre>
     *drillevaluate
     * </pre>
     */
    drillevaluate(21, 21),
    ;

    /**
     * <code>organization = 0;</code>
     *
     * <pre>
     *organization	
     * </pre>
     */
    public static final int organization_VALUE = 0;
    /**
     * <code>user = 1;</code>
     *
     * <pre>
     *user	
     * </pre>
     */
    public static final int user_VALUE = 1;
    /**
     * <code>log = 2;</code>
     *
     * <pre>
     *log
     * </pre>
     */
    public static final int log_VALUE = 2;
    /**
     * <code>feed_back = 3;</code>
     *
     * <pre>
     *feed_back
     * </pre>
     */
    public static final int feed_back_VALUE = 3;
    /**
     * <code>company = 4;</code>
     *
     * <pre>
     *company
     * </pre>
     */
    public static final int company_VALUE = 4;
    /**
     * <code>industry = 5;</code>
     *
     * <pre>
     *industry
     * </pre>
     */
    public static final int industry_VALUE = 5;
    /**
     * <code>deviceinfo = 6;</code>
     *
     * <pre>
     *deviceinfo
     * </pre>
     */
    public static final int deviceinfo_VALUE = 6;
    /**
     * <code>drillscene = 7;</code>
     *
     * <pre>
     *drillscene
     * </pre>
     */
    public static final int drillscene_VALUE = 7;
    /**
     * <code>switchdevice = 8;</code>
     *
     * <pre>
     *switchdevice
     * </pre>
     */
    public static final int switchdevice_VALUE = 8;
    /**
     * <code>switchdeviceagent = 9;</code>
     *
     * <pre>
     *switchdeviceagent
     * </pre>
     */
    public static final int switchdeviceagent_VALUE = 9;
    /**
     * <code>devicetype = 10;</code>
     *
     * <pre>
     *devicetype
     * </pre>
     */
    public static final int devicetype_VALUE = 10;
    /**
     * <code>drillskilltype = 11;</code>
     *
     * <pre>
     *drillskilltype
     * </pre>
     */
    public static final int drillskilltype_VALUE = 11;
    /**
     * <code>drillskill = 12;</code>
     *
     * <pre>
     *drillskill
     * </pre>
     */
    public static final int drillskill_VALUE = 12;
    /**
     * <code>drillmissiontype = 13;</code>
     *
     * <pre>
     *drillmissiontype
     * </pre>
     */
    public static final int drillmissiontype_VALUE = 13;
    /**
     * <code>drillmission = 14;</code>
     *
     * <pre>
     *drillmission
     * </pre>
     */
    public static final int drillmission_VALUE = 14;
    /**
     * <code>drillmissionpoolagent = 15;</code>
     *
     * <pre>
     *drillmissionpoolagent
     * </pre>
     */
    public static final int drillmissionpoolagent_VALUE = 15;
    /**
     * <code>switchdevicetype = 16;</code>
     *
     * <pre>
     *switchdevicetype
     * </pre>
     */
    public static final int switchdevicetype_VALUE = 16;
    /**
     * <code>drillscheme = 17;</code>
     *
     * <pre>
     *drillscheme
     * </pre>
     */
    public static final int drillscheme_VALUE = 17;
    /**
     * <code>drillcharactertype = 18;</code>
     *
     * <pre>
     *drillcharactertype
     * </pre>
     */
    public static final int drillcharactertype_VALUE = 18;
    /**
     * <code>drillcharacter = 19;</code>
     *
     * <pre>
     *drillcharacter
     * </pre>
     */
    public static final int drillcharacter_VALUE = 19;
    /**
     * <code>drillgroup = 20;</code>
     *
     * <pre>
     *drillgroup
     * </pre>
     */
    public static final int drillgroup_VALUE = 20;
    /**
     * <code>drillevaluate = 21;</code>
     *
     * <pre>
     *drillevaluate
     * </pre>
     */
    public static final int drillevaluate_VALUE = 21;


    public final int getNumber() { return value; }

    public static SaveTarget valueOf(int value) {
      switch (value) {
        case 0: return organization;
        case 1: return user;
        case 2: return log;
        case 3: return feed_back;
        case 4: return company;
        case 5: return industry;
        case 6: return deviceinfo;
        case 7: return drillscene;
        case 8: return switchdevice;
        case 9: return switchdeviceagent;
        case 10: return devicetype;
        case 11: return drillskilltype;
        case 12: return drillskill;
        case 13: return drillmissiontype;
        case 14: return drillmission;
        case 15: return drillmissionpoolagent;
        case 16: return switchdevicetype;
        case 17: return drillscheme;
        case 18: return drillcharactertype;
        case 19: return drillcharacter;
        case 20: return drillgroup;
        case 21: return drillevaluate;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SaveTarget>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SaveTarget>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SaveTarget>() {
            public SaveTarget findValueByNumber(int number) {
              return SaveTarget.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ssit.proto.MessageProto.getDescriptor().getEnumTypes().get(2);
    }

    private static final SaveTarget[] VALUES = values();

    public static SaveTarget valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SaveTarget(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SSIT.proto.SaveTarget)
  }

  /**
   * Protobuf enum {@code SSIT.proto.SysErrorCode}
   */
  public enum SysErrorCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>Success = 0;</code>
     *
     * <pre>
     *成功
     * </pre>
     */
    Success(0, 0),
    /**
     * <code>CodeError = 1;</code>
     *
     * <pre>
     *系统异常
     * </pre>
     */
    CodeError(1, 1),
    /**
     * <code>DataBaseError = 2;</code>
     *
     * <pre>
     *数据库异常
     * </pre>
     */
    DataBaseError(2, 2),
    /**
     * <code>LogicError = 3;</code>
     *
     * <pre>
     * 业务异常
     * </pre>
     */
    LogicError(3, 3),
    ;

    /**
     * <code>Success = 0;</code>
     *
     * <pre>
     *成功
     * </pre>
     */
    public static final int Success_VALUE = 0;
    /**
     * <code>CodeError = 1;</code>
     *
     * <pre>
     *系统异常
     * </pre>
     */
    public static final int CodeError_VALUE = 1;
    /**
     * <code>DataBaseError = 2;</code>
     *
     * <pre>
     *数据库异常
     * </pre>
     */
    public static final int DataBaseError_VALUE = 2;
    /**
     * <code>LogicError = 3;</code>
     *
     * <pre>
     * 业务异常
     * </pre>
     */
    public static final int LogicError_VALUE = 3;


    public final int getNumber() { return value; }

    public static SysErrorCode valueOf(int value) {
      switch (value) {
        case 0: return Success;
        case 1: return CodeError;
        case 2: return DataBaseError;
        case 3: return LogicError;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SysErrorCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SysErrorCode>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SysErrorCode>() {
            public SysErrorCode findValueByNumber(int number) {
              return SysErrorCode.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.ssit.proto.MessageProto.getDescriptor().getEnumTypes().get(3);
    }

    private static final SysErrorCode[] VALUES = values();

    public static SysErrorCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private SysErrorCode(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SSIT.proto.SysErrorCode)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024protos/message.proto\022\nSSIT.proto*\276\023\n\tM" +
      "essageID\022\016\n\nLoginModel\020\000\022\013\n\007CSLogin\020\001\022\021\n" +
      "\rSCLoginResult\020\002\022\014\n\010CSLogout\020\003\022\022\n\016SCLogo" +
      "utResult\020\004\022\030\n\024SCFeedBackSaveResult\020\005\022\020\n\013" +
      "SystemModel\020\350\007\022\035\n\030SCOrganizeInfoListResu" +
      "lt\020\351\007\022\035\n\030SCSaveOrganizeInfoResult\020\352\007\022\037\n\032" +
      "SCDeleteOrganizeInfoResult\020\353\007\022\031\n\024SCUserI" +
      "nfoListResult\020\354\007\022\031\n\024SCSaveUserInfoResult" +
      "\020\355\007\022\033\n\026SCDeleteUserInfoResult\020\356\007\022\032\n\025SCAu" +
      "thorityListResult\020\357\007\022\030\n\023SCLogInfoListRes",
      "ult\020\360\007\022\032\n\025SCDeleteLogInfoResult\020\361\007\022\017\n\nSc" +
      "eneModel\020\320\017\022\034\n\027SCCompanyInfoListResult\020\321" +
      "\017\022\034\n\027SCSaveCompanyInfoResult\020\322\017\022\036\n\031SCDel" +
      "eteCompanyInfoResult\020\323\017\022\035\n\030SCIndustryInf" +
      "oListResult\020\324\017\022\035\n\030SCSaveIndustryInfoResu" +
      "lt\020\325\017\022\037\n\032SCDeleteIndustryInfoResult\020\326\017\022\033" +
      "\n\026SCSaveDeviceInfoResult\020\327\017\022\037\n\032SCDeviceB" +
      "aseInfolistResult\020\330\017\022\032\n\025SCSaveSceneInfoR" +
      "esult\020\331\017\022\032\n\025SCSceneInfoListResult\020\332\017\022\034\n\027" +
      "SCDeleteSceneInfoResult\020\333\017\022!\n\034SCSwitchDe",
      "viceInfolistResult\020\334\017\022!\n\034SCSaveSwitchDev" +
      "iceInfoResult\020\335\017\022#\n\036SCDeleteSwitchDevice" +
      "InfoResult\020\336\017\022 \n\033SCBundingSwitchDeviceRe" +
      "sult\020\337\017\022&\n!SCRemoveBundingSwitchDeviceRe" +
      "sult\020\340\017\022\033\n\026SCDeviceTypelistResult\020\341\017\022\033\n\026" +
      "SCSaveDeviceTypeResult\020\342\017\022\035\n\030SCDeleteDev" +
      "iceTypeResult\020\343\017\022!\n\034SCDeleteDeviceBaseIn" +
      "foResult\020\344\017\022%\n SCSwitchDeviceTypeInfolis" +
      "tResult\020\345\017\022!\n\034SCSaveSwitchDeviceTypeResu" +
      "lt\020\346\017\022#\n\036SCDeleteSwitchDeviceTypeResult\020",
      "\347\017\022\022\n\rAccidentModel\020\270\027\022\034\n\027SCSaveMeasureT" +
      "ypeResult\020\271\027\022\036\n\031SCDeleteMeasureTypeResul" +
      "t\020\272\027\022\034\n\027SCMeasureTypelistResult\020\273\027\022\034\n\027SC" +
      "MeasureInfoListResult\020\274\027\022\030\n\023SCSaveMeasur" +
      "eResult\020\275\027\022\032\n\025SCDeleteMeasureResult\020\276\027\022\031" +
      "\n\024SCTaskTypeListResult\020\277\027\022\031\n\024SCSaveTaskT" +
      "ypeResult\020\300\027\022\033\n\026SCDeleteTaskTypeResult\020\301" +
      "\027\022\031\n\024SCSaveTaskInfoResult\020\302\027\022\033\n\026SCDelete" +
      "TaskInfoResult\020\303\027\022\031\n\024SCTaskInfoListResul" +
      "t\020\304\027\022\031\n\024SCAccidentListResult\020\307\027\022\022\n\rCSAdd",
      "Accident\020\310\027\022\030\n\023SCAddAccidentResult\020\311\027\022\033\n" +
      "\026SCDeleteAccidentResult\020\312\027\022\025\n\020CSUpdateAc" +
      "cident\020\313\027\022\033\n\026SCUpdateAccidentResult\020\314\027\022\035" +
      "\n\030SCAccidentTypeListResult\020\315\027\022\036\n\031SCChara" +
      "ctorTypeListResult\020\316\027\022\036\n\031SCSaveCharactor" +
      "TypeResult\020\317\027\022 \n\033SCDeleteCharactorTypeRe" +
      "sult\020\320\027\022\032\n\025SCCharacterListResult\020\321\027\022\036\n\031S" +
      "CSaveCharactorInfoResult\020\322\027\022 \n\033SCDeleteC" +
      "haractorInfoResult\020\323\027\022\023\n\016CSAddGroupInfo\020" +
      "\324\027\022\031\n\024SCAddGroupInfoResult\020\325\027\022\034\n\027SCDelet",
      "eGroupInfoResult\020\326\027\022\026\n\021CSUpdateGroupInfo" +
      "\020\327\027\022\034\n\027SCUpdateGroupInfoResult\020\330\027\022\032\n\025SCG" +
      "roupInfoListResult\020\331\027\022\037\n\032SCEvaluationInf" +
      "oListResult\020\332\027\022\037\n\032SCSaveEvaluationInfoRe" +
      "sult\020\333\027\022!\n\034SCDeleteEvaluationInfoResult\020" +
      "\334\027\022\034\n\027CSSceneEditLockStatList\020\335\027\022\"\n\035SCSc" +
      "eneEditLockStatListResult\020\336\027\022\035\n\030CSScheme" +
      "EditLockStatList\020\337\027\022#\n\036SCSchemeEditLockS" +
      "tatListResult\020\340\027\022\031\n\024CSUpdateEditLockStat" +
      "\020\341\027\022#\n\036SCUpdateEditLockStatListResult\020\342\027",
      "\022\032\n\025CSDeleteCharactorType\020\343\027\022\020\n\013CommenMo" +
      "del\020\250F\022\022\n\rCSCommonQuery\020\251F\022\021\n\014CSCommonSa" +
      "ve\020\252F\022\023\n\016CSCommonRemove\020\253F\022\023\n\016SCCommonRe" +
      "sult\020\254F\032\002\020\001*\305\003\n\010QueryKey\022\030\n\024sallOrganize" +
      "InfoList\020\000\022\020\n\014userInfoList\020\001\022\r\n\tpowerLis" +
      "t\020\002\022\017\n\013logInfoList\020\003\022\017\n\013companyList\020\004\022\024\n" +
      "\020industryInfoList\020\005\022\016\n\ndeviceList\020\006\022\024\n\020s" +
      "ceneMgrInfoList\020\007\022\024\n\020switchDeviceList\020\010\022" +
      "\030\n\024switchDeviceTypeList\020\t\022\025\n\021switchBundi" +
      "ngList\020\n\022\022\n\016deviceTypeList\020\013\022\021\n\rskillTyp",
      "eList\020\014\022\r\n\tskillList\020\r\022\020\n\014taskTypeList\020\016" +
      "\022\020\n\014taskInfoList\020\017\022\024\n\020accidentInfoList\020\020" +
      "\022\024\n\020accidentTypeList\020\021\022\025\n\021charactorTypeL" +
      "ist\020\022\022\025\n\021charactorInfoList\020\023\022\022\n\016evaluati" +
      "onList\020\024\022\021\n\rgroupInfoList\020\025*\221\003\n\nSaveTarg" +
      "et\022\020\n\014organization\020\000\022\010\n\004user\020\001\022\007\n\003log\020\002\022" +
      "\r\n\tfeed_back\020\003\022\013\n\007company\020\004\022\014\n\010industry\020" +
      "\005\022\016\n\ndeviceinfo\020\006\022\016\n\ndrillscene\020\007\022\020\n\014swi" +
      "tchdevice\020\010\022\025\n\021switchdeviceagent\020\t\022\016\n\nde" +
      "vicetype\020\n\022\022\n\016drillskilltype\020\013\022\016\n\ndrills",
      "kill\020\014\022\024\n\020drillmissiontype\020\r\022\020\n\014drillmis" +
      "sion\020\016\022\031\n\025drillmissionpoolagent\020\017\022\024\n\020swi" +
      "tchdevicetype\020\020\022\017\n\013drillscheme\020\021\022\026\n\022dril" +
      "lcharactertype\020\022\022\022\n\016drillcharacter\020\023\022\016\n\n" +
      "drillgroup\020\024\022\021\n\rdrillevaluate\020\025*M\n\014SysEr" +
      "rorCode\022\013\n\007Success\020\000\022\r\n\tCodeError\020\001\022\021\n\rD" +
      "ataBaseError\020\002\022\016\n\nLogicError\020\003B\036\n\016com.ss" +
      "it.protoB\014MessageProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
